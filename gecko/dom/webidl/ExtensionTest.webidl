/* 
 *  THIS IS AN AUTOGENERATED FILE.  DO NOT EDIT
 *
 *  The content of this file has been generated based on the WebExtensions API
 *  JSONSchema using the following command:
 *
 *  export SCRIPT_DIR="toolkit/components/extensions/webidl-api"
 *  mach python $SCRIPT_DIR/GenerateWebIDLBindings.py -- test
 *
 *  More info about generating webidl API bindings for WebExtensions API at:
 *
 *  https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/webidl_bindings.html
 */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * You are granted a license to use, reproduce and create derivative works of
 * this document.
 */

// WebIDL definition for the "test" WebExtensions API
[Exposed=(ServiceWorker), LegacyNoInterfaceObject]
interface ExtensionTest {
  // API methods.

  [Throws, WebExtensionStub="NotImplementedNoReturn"]
  void withHandlingUserInput(Function callback);

  [Throws, WebExtensionStub="NoReturn"]
  void notifyFail(DOMString message);

  [Throws, WebExtensionStub="NoReturn"]
  void notifyPass(DOMString message);
  [Throws, WebExtensionStub="NoReturn"]
  void notifyPass();

  [Throws, WebExtensionStub="NoReturn"]
  void log(DOMString message);

  [Throws, WebExtensionStub="NoReturn"]
  void sendMessage(any... args);

  [Throws, WebExtensionStub="NoReturn"]
  void fail(any message);
  [Throws, WebExtensionStub="NoReturn"]
  void fail();

  [Throws, WebExtensionStub="NoReturn"]
  void succeed(any message);
  [Throws, WebExtensionStub="NoReturn"]
  void succeed();

  [Throws, WebExtensionStub="NoReturn"]
  void assertTrue(any... args);

  [Throws, WebExtensionStub="NoReturn"]
  void assertFalse(any... args);

  [Throws, WebExtensionStub="AssertEq"]
  void assertEq(any... args);

  [Throws]
  any assertRejects(Promise<any> promise, any expectedError, DOMString message, optional Function callback);
  [Throws]
  any assertRejects(Promise<any> promise, any expectedError, optional Function callback);

  [Throws]
  void assertThrows(Function func, any expectedError, DOMString message);
  [Throws]
  void assertThrows(Function func, any expectedError);

  // API events.

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onMessage;
};
